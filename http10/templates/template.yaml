apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: http10
  title: HttpMyMapping2
  description: qwerty
  tags:
  - openshift
  - recommended
spec:
  owner: '189038'
  type: service
  parameters:
  - title: Заполнение полей шаблона
    required:
    - APP_NAME
    - MAPPING_JSON
    - INTERNAL_PREFIX
    - PROJECT_NAME
    - EXTERNAL_PORT
    - INGRESS_PORT
    - EGRESS_PORT
    - CLUSTER
    - ISTIO_CONTROL_PLANE
    - TEST_APP_URL
    properties:
      APP_NAME:
        title: Название шаблона
        type: string
      MAPPING_JSON:
        title: JSON-строка маппинга
        type: string
      INTERNAL_PREFIX:
        title: Префикс для целевого сервиса
        type: string
      PROJECT_NAME:
        title: Название проекта
        type: string
      EXTERNAL_PORT:
        title: Порт внешнего приложения
        type: string
      INGRESS_PORT:
        title: Порт ингресса
        type: string
      EGRESS_PORT:
        title: egress port
        type: string
      CLUSTER:
        title: Название кластера
        type: string
        enum:
        - syn-sb
        - dev-gen
        - dev-gen2
      ISTIO_CONTROL_PLANE:
        title: Название control panel
        type: string
      TEST_APP_URL:
        title: Внешний хост приложения
        type: string
      account:
        title: Bitbucket account
        type: string
        default: SA-SDVO0000055
        ui:widget: hidden
  - title: Установка шаблона в проект
    required:
    - install
    properties:
      install:
        title: Установить шаблон в проект
        type: boolean
        default: false
    dependencies:
      install:
        oneOf:
        - properties:
            install:
              const: false
        - properties:
            install:
              const: true
            cluster:
              title: Cluster
              type: string
              description: Cluster
              enum:
              - syn-sb
              - dev-gen
              - dev-gen2
            server:
              title: API Server
              type: string
              description: API Server
              enum:
              - https://api.syn-sb.sigma.sbrf.ru:6443
              - https://api.dev-gen.sigma.sbrf.ru:6443
              - https://api.dev-gen2.sigma.sbrf.ru:6443
            project:
              title: Project
              type: string
              description: Project
            token:
              title: Token
              type: string
              description: Token
          required:
          - cluster
          - server
          - project
          - token
  - title: Регистрация компонента в backstage
    required:
    - register
    properties:
      register:
        title: Добавить компонент в backstage
        type: boolean
        default: false
    dependencies:
      register:
        oneOf:
        - properties:
            register:
              const: false
        - properties:
            register:
              const: true
            repoUrl:
              title: Repository Location
              type: string
              ui:field: RepoUrlPicker
              ui:options:
                allowedHosts:
                - stash.sigma.sbrf.ru
            name:
              title: Name
              type: string
              description: Unique name of the component
              ui:autofocus: true
              ui:options:
                rows: 5
            owner:
              title: Owner
              type: string
              description: Owner of the component
              ui:field: OwnerPicker
              ui:options:
                allowedKinds:
                - Group
  steps:
  - id: fetch-base
    name: Подготовка конфигов
    action: fetch:template
    input:
      url: ./base
      cookiecutterCompat: true
      values:
        name: ${{ parameters.name }}
        owner: ${{ parameters.owner }}
        PROJECT_NAME: ${{parameters.PROJECT_NAME}}
        APP_NAME: ${{parameters.APP_NAME}}
        MAPPING_JSON: ${{parameters.MAPPING_JSON}}
        INTERNAL_PREFIX: ${{parameters.INTERNAL_PREFIX}}
        DOMAIN: sigma
        EXTERNAL_PORT: ${{parameters.EXTERNAL_PORT}}
        UNIMAPPER_IMAGE: registry.sigma.sbrf.ru/dev/ci01994970/ci02001129_synapse_dev/ci02564634_asgt-unimapper-dev:0.1.0.5
        PROXY_IMAGE: registry.redhat.io/openshift-service-mesh/proxyv2-rhel8@sha256:03ba7a4bed6122c842ac0aeca626be7e6f3ec2106acee2ffda017c8cbf36e41b
        INGRESS_PORT: ${{parameters.INGRESS_PORT}}
        EGRESS_PORT: ${{parameters.EGRESS_PORT}}
        CLUSTER: ${{parameters.CLUSTER}}
        ISTIO_CONTROL_PLANE: ${{parameters.ISTIO_CONTROL_PLANE}}
        TEST_APP_URL: ${{parameters.TEST_APP_URL}}
  - id: fetch-template
    name: Загрузка шаблона
    action: fetch:template
    input:
      url: ./base/template
      cookiecutterCompat: true
      targetPath: ./templates/template
      values:
        PROJECT_NAME: ${{parameters.PROJECT_NAME}}
        APP_NAME: ${{parameters.APP_NAME}}
        PROXY_IMAGE: ${{parameters.PROXY_IMAGE}}
        MAPPING_JSON: ${{parameters.MAPPING_JSON}}
        INTERNAL_PREFIX: ${{parameters.INTERNAL_PREFIX}}
        DOMAIN: ${{parameters.DOMAIN}}
        EXTERNAL_PORT: ${{parameters.EXTERNAL_PORT}}
        UNIMAPPER_IMAGE: ${{parameters.UNIMAPPER_IMAGE}}
        INGRESS_PORT: ${{parameters.INGRESS_PORT}}
        EGRESS_PORT: ${{parameters.EGRESS_PORT}}
        CLUSTER: ${{parameters.CLUSTER}}
        ISTIO_CONTROL_PLANE: ${{parameters.ISTIO_CONTROL_PLANE}}
        TEST_APP_URL: ${{parameters.TEST_APP_URL}}
  - id: generate
    name: Генерация шаблона
    action: generate:template
    input:
      url: ./template/template.yaml
      targetPathForEnv: /templates/template/template.env
      targetPathForConfigs: /templates/configs.yaml
      downloadLink: https://stash.sigma.sbrf.ru/rest/api/latest/projects/~${{parameters.account}}/repos/BACKSTAGE_USER_ID/archive?format=zip
      viewLink: https://stash.sigma.sbrf.ru/users/${{parameters.account}}/repos/BACKSTAGE_USER_ID/browse/configs.yaml?raw
      values:
        PROJECT_NAME: ${{parameters.PROJECT_NAME}}
        APP_NAME: ${{parameters.APP_NAME}}
        PROXY_IMAGE: registry.redhat.io/openshift-service-mesh/proxyv2-rhel8@sha256:03ba7a4bed6122c842ac0aeca626be7e6f3ec2106acee2ffda017c8cbf36e41b
        MAPPING_JSON: ${{parameters.MAPPING_JSON}}
        INTERNAL_PREFIX: ${{parameters.INTERNAL_PREFIX}}
        DOMAIN: sigma
        EXTERNAL_PORT: ${{parameters.EXTERNAL_PORT}}
        UNIMAPPER_IMAGE: registry.sigma.sbrf.ru/dev/ci01994970/ci02001129_synapse_dev/ci02564634_asgt-unimapper-dev:0.1.0.5
        INGRESS_PORT: ${{parameters.INGRESS_PORT}}
        EGRESS_PORT: ${{parameters.EGRESS_PORT}}
        CLUSTER: ${{parameters.CLUSTER}}
        ISTIO_CONTROL_PLANE: ${{parameters.ISTIO_CONTROL_PLANE}}
        TEST_APP_URL: ${{parameters.TEST_APP_URL}}
  - id: publish-to-storage
    name: Публикация шаблона
    action: publish:bitbucket
    input:
      description: This is name
      repoVisibility: public
      repoUrl: stash.sigma.sbrf.ru?repo=${{ steps.generate.output.userId }}&project=%7E${{parameters.account}}
      sourcePath: templates
  - id: install
    name: Установка в проект OpenShift
    action: install:openshift
    input:
      url: ./template/template.yaml
      cluster: ${{ parameters.cluster }}
      server: ${{ parameters.server }}
      project: ${{ parameters.project }}
      token: ${{ parameters.token }}
      projectLink: https://console-openshift-console.apps.${{ parameters.cluster }}.sigma.sbrf.ru/k8s/cluster/projects/${{
        parameters.project }}
    if: ${{ parameters.install }}
  - id: delete
    name: Очистка вспомогательных файлов
    action: fs:delete
    input:
      files:
      - template
  - id: publish
    name: Публикация компонента
    action: publish:bitbucket
    input:
      description: This is test-app from backstage
      repoUrl: ${{ parameters.repoUrl }}
    if: ${{ parameters.register }}
  - id: register
    name: Регистрация в Backstage
    action: catalog:register
    input:
      repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
      catalogInfoPath: /catalog-info.yaml
    if: ${{ parameters.register }}
  output:
    links:
    - url: ${{ steps.generate.output.downloadLink }}
      title: Скачать архив
    - url: ${{ steps.generate.output.viewLink }}
      title: Посмотреть шаблон
      icon: chat
    - url: ${{ steps.install.output.projectLink }}
      title: Проект Openshift
      icon: dashboard
    - title: Репозиторий
      url: ${{ steps.publish.output.remoteUrl }}
    - title: Открыть в каталоге Backstage
      icon: catalog
      entityRef: ${{ steps.register.output.entityRef }}
