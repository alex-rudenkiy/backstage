apiVersion: v1
kind: Template
metadata:
  name: http-ingress-mapping-egress-http-notification
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      template: {{cookiecutter.APP_NAME}}
      app: ingressgateway-{{cookiecutter.PROJECT_NAME}}
      app.kubernetes.io/component: gateways
      app.kubernetes.io/instance: {{cookiecutter.ISTIO_CONTROL_PLANE}}
      app.kubernetes.io/name: gateways
      app.kubernetes.io/part-of: istio
      chart: gateways
      heritage: Tiller
      istio: ingressgateway-{{cookiecutter.PROJECT_NAME}}
      release: istio
    name: ingressgateway-{{cookiecutter.PROJECT_NAME}}
  spec:
    progressDeadlineSeconds: 1200
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: ingressgateway-{{cookiecutter.PROJECT_NAME}}
        istio: ingressgateway-{{cookiecutter.PROJECT_NAME}}
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: 'false'
        creationTimestamp: null
        labels:
          app: ingressgateway-{{cookiecutter.PROJECT_NAME}}
          chart: gateways
          heritage: Tiller
          istio: ingressgateway-{{cookiecutter.PROJECT_NAME}}
          release: istio
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: beta.kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
              weight: 2
            - preference:
                matchExpressions:
                - key: beta.kubernetes.io/arch
                  operator: In
                  values:
                  - ppc64le
              weight: 2
            - preference:
                matchExpressions:
                - key: beta.kubernetes.io/arch
                  operator: In
                  values:
                  - s390x
              weight: 2
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: beta.kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - ppc64le
                  - s390x
        containers:
        - args:
          - proxy
          - router
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --serviceCluster
          - ingressgateway-{{cookiecutter.PROJECT_NAME}}.$(POD_NAMESPACE)
          - --trust-domain=cluster.local
          env:
          - name: JWT_POLICY
            value: first-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: {{cookiecutter.ISTIOD_NAME}}.{{cookiecutter.ISTIO_CONTROL_PLANE}}.svc:15012
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          - name: CANONICAL_SERVICE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['service.istio.io/canonical-name']
          - name: CANONICAL_REVISION
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['service.istio.io/canonical-revision']
          - name: ISTIO_META_WORKLOAD_NAME
            value: ingressgateway-{{cookiecutter.PROJECT_NAME}}
          - name: ISTIO_META_OWNER
            value: kubernetes://apis/apps/v1/namespaces/{{cookiecutter.PROJECT_NAME}}/deployments/ingressgateway-{{cookiecutter.PROJECT_NAME}}
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: PROXY_CONFIG
            value: '{"discoveryAddress":"{{cookiecutter.ISTIOD_NAME}}.{{cookiecutter.ISTIO_CONTROL_PLANE}}.svc:15012","tracing":{"zipkin":{"address":"jaeger-collector.{{cookiecutter.ISTIO_CONTROL_PLANE}}.svc:9411"},"tlsSettings":{"subjectAltNames":[]}},"proxyMetadata":{"DNS_AGENT":""}}

              '
          - name: ISTIO_META_ROUTER_MODE
            value: sni-dnat
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          image: {{cookiecutter.PROXY_IMAGE}}
          imagePullPolicy: Always
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 600m
              memory: 900Mi
            requests:
              cpu: 400m
              memory: 700Mi
          securityContext:
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /etc/istio/pod
            name: podinfo
          - name: ingressgateway-certs
            mountPath: /etc/istio/ingressgateway-certs
          - name: ingressgateway-ca-certs
            mountPath: /etc/istio/ingressgateway-ca-certs
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccountName: default
        terminationGracePeriodSeconds: 60
        volumes:
        - emptyDir: {}
          name: istio-envoy
        - configMap:
            defaultMode: 420
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - name: ingressgateway-certs
          secret:
            secretName: istio-ingressgateway-certs
            defaultMode: 420
            optional: true
        - name: ingressgateway-ca-certs
          secret:
            secretName: istio-ingressgateway-ca-certs
            defaultMode: 420
            optional: true
        - downwardAPI:
            defaultMode: 256
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations
              path: annotations
          name: podinfo
- apiVersion: networking.istio.io/v1alpha3
  kind: Gateway
  metadata:
    name: ingressgateway-gw
    labels:
      template: {{cookiecutter.APP_NAME}}
  spec:
    selector:
      istio: ingressgateway-{{cookiecutter.PROJECT_NAME}}
    servers:
    - hosts:
      - ingress-{{cookiecutter.PROJECT_NAME}}.apps.{{cookiecutter.CLUSTER}}.sbercloud.ru
      port:
        name: http-{{cookiecutter.INGRESS_PORT}}
        number: {{cookiecutter.INGRESS_PORT}}
        protocol: HTTP
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      template: {{cookiecutter.APP_NAME}}
      app: ingressgateway-{{cookiecutter.PROJECT_NAME}}
      istio: ingressgateway-{{cookiecutter.PROJECT_NAME}}
    name: ingressgateway-http
  spec:
    host: ingress-{{cookiecutter.PROJECT_NAME}}.apps.{{cookiecutter.CLUSTER}}.sbercloud.ru
    port:
      targetPort: http-{{cookiecutter.INGRESS_PORT}}
    to:
      kind: Service
      name: ingressgateway-svc
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      template: {{cookiecutter.APP_NAME}}
      app: ingressgateway-{{cookiecutter.PROJECT_NAME}}
      istio: ingressgateway-{{cookiecutter.PROJECT_NAME}}
    name: ingressgateway-svc
  spec:
    ports:
    - name: status-port
      port: 15021
      protocol: TCP
      targetPort: 15021
    - name: http-{{cookiecutter.INGRESS_PORT}}
      port: {{cookiecutter.INGRESS_PORT}}
    selector:
      app: ingressgateway-{{cookiecutter.PROJECT_NAME}}
      istio: ingressgateway-{{cookiecutter.PROJECT_NAME}}
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: {{cookiecutter.APP_NAME}}
    labels:
      template: {{cookiecutter.APP_NAME}}
      app: {{cookiecutter.APP_NAME}}
  spec:
    selector:
      matchLabels:
        app: {{cookiecutter.APP_NAME}}
    replicas: 1
    template:
      metadata:
        labels:
          app: {{cookiecutter.APP_NAME}}
        annotations:
          sidecar.istio.io/inject: 'true'
      spec:
        volumes:
        - name: app-config
          configMap:
            name: {{cookiecutter.APP_NAME}}-cm
            defaultMode: 420
        containers:
        - name: {{cookiecutter.APP_NAME}}
          image: {{cookiecutter.UNIMAPPER_IMAGE}}
          ports:
          - containerPort: 8787
            protocol: TCP
          env:
          - name: PROJECT_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          envFrom:
          - configMapRef:
              name: {{cookiecutter.APP_NAME}}-cm
          volumeMounts:
          - name: app-config
            readOnly: true
            mountPath: /schemas
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 150m
              memory: 100Mi
- kind: Service
  apiVersion: v1
  metadata:
    name: {{cookiecutter.APP_NAME}}-svc
  spec:
    selector:
      app: {{cookiecutter.APP_NAME}}
    ports:
    - name: http
      protocol: TCP
      port: 8787
      targetPort: 8787
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: {{cookiecutter.APP_NAME}}-cm
    labels:
      app: {{cookiecutter.APP_NAME}}
  data:
    TRANSFORM_RESPONSE: 'false'
    LOG_LEVEL: debug
    JSON_REQUEST: /schemas/json-request.json
    json-request.json: '[{{cookiecutter.MAPPING_JSON_RQ}}]'
- apiVersion: networking.istio.io/v1alpha3
  kind: VirtualService
  metadata:
    name: {{cookiecutter.APP_NAME}}-ingress-vs
  spec:
    exportTo:
    - .
    gateways:
    - ingressgateway-gw
    hosts:
    - '*'
    http:
    - match:
      - uri:
          prefix: /{{cookiecutter.INTERNAL_PREFIX}}
      route:
      - destination:
          host: {{cookiecutter.APP_NAME}}-svc
          port:
            number: 8787
- apiVersion: networking.istio.io/v1alpha3
  kind: ServiceEntry
  metadata:
    name: {{cookiecutter.APP_NAME}}-external-host
  spec:
    exportTo:
    - .
    hosts:
    - {{cookiecutter.TEST_APP_URL}}
    ports:
    - name: http
      number: {{cookiecutter.EXTERNAL_PORT}}
      protocol: HTTP
    resolution: DNS
- apiVersion: networking.istio.io/v1alpha3
  kind: VirtualService
  metadata:
    name: {{cookiecutter.APP_NAME}}-egress-vs
  spec:
    exportTo:
    - .
    gateways:
    - {{cookiecutter.APP_NAME}}-egressgateway-gw
    - mesh
    hosts:
    - {{cookiecutter.TEST_APP_URL}}
    http:
    - match:
      - gateways:
        - mesh
        port: {{cookiecutter.EXTERNAL_PORT}}
      route:
      - destination:
          host: egressgateway-svc
          port:
            number: 8080
    - match:
      - gateways:
        - {{cookiecutter.APP_NAME}}-egressgateway-gw
        port: 8080
      route:
      - destination:
          host: {{cookiecutter.TEST_APP_URL}}
          port:
            number: {{cookiecutter.EXTERNAL_PORT}}
- apiVersion: networking.istio.io/v1alpha3
  kind: Gateway
  metadata:
    labels:
      template: {{cookiecutter.APP_NAME}}
    name: {{cookiecutter.APP_NAME}}-egressgateway-gw
  spec:
    selector:
      istio: egressgateway-{{cookiecutter.PROJECT_NAME}}
    servers:
    - hosts:
      - {{cookiecutter.TEST_APP_URL}}
      port:
        name: http-{{cookiecutter.EGRESS_PORT}}
        number: {{cookiecutter.EGRESS_PORT}}
        protocol: HTTP
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: egressgateway-{{cookiecutter.PROJECT_NAME}}
    labels:
      template: {{cookiecutter.APP_NAME}}
      app: egressgateway-{{cookiecutter.PROJECT_NAME}}
      app.kubernetes.io/part-of: istio
      app.kubernetes.io/instance: {{cookiecutter.ISTIO_CONTROL_PLANE}}
      release: istio
      app.kubernetes.io/version: 2.0.1-6.el8-75
      app.kubernetes.io/component: gateways
      istio: egressgateway-{{cookiecutter.PROJECT_NAME}}
      app.kubernetes.io/managed-by: maistra-istio-operator
      app.kubernetes.io/name: gateways
      chart: gateways
      heritage: Tiller
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: egressgateway-{{cookiecutter.PROJECT_NAME}}
        istio: egressgateway-{{cookiecutter.PROJECT_NAME}}
    template:
      metadata:
        namespace: {{cookiecutter.PROJECT_NAME}}
        creationTimestamp: null
        labels:
          app: egressgateway-{{cookiecutter.PROJECT_NAME}}
          chart: gateways
          heritage: Tiller
          istio: egressgateway-{{cookiecutter.PROJECT_NAME}}
          release: istio
        annotations:
          sidecar.istio.io/inject: 'false'
      spec:
        restartPolicy: Always
        serviceAccountName: default
        schedulerName: default-scheduler
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: beta.kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - ppc64le
                  - s390x
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 2
              preference:
                matchExpressions:
                - key: beta.kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
            - weight: 2
              preference:
                matchExpressions:
                - key: beta.kubernetes.io/arch
                  operator: In
                  values:
                  - ppc64le
            - weight: 2
              preference:
                matchExpressions:
                - key: beta.kubernetes.io/arch
                  operator: In
                  values:
                  - s390x
        terminationGracePeriodSeconds: 60
        securityContext: {}
        containers:
        - resources:
            limits:
              cpu: 600m
              memory: 900Mi
            requests:
              cpu: 400m
              memory: 700Mi
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: 15021
              scheme: HTTP
            initialDelaySeconds: 1
            timeoutSeconds: 5
            periodSeconds: 2
            successThreshold: 1
            failureThreshold: 30
          terminationMessagePath: /dev/termination-log
          name: istio-proxy
          env:
          - name: JWT_POLICY
            value: first-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: {{cookiecutter.ISTIOD_NAME}}.{{cookiecutter.ISTIO_CONTROL_PLANE}}.svc:15012
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          - name: CANONICAL_SERVICE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['service.istio.io/canonical-name']
          - name: CANONICAL_REVISION
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['service.istio.io/canonical-revision']
          - name: ISTIO_META_WORKLOAD_NAME
            value: egressgateway-{{cookiecutter.PROJECT_NAME}}
          - name: ISTIO_META_OWNER
            value: kubernetes://apis/apps/v1/namespaces/{{cookiecutter.PROJECT_NAME}}/deployments/ingressgateway-{{cookiecutter.PROJECT_NAME}}
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: PROXY_CONFIG
            value: '{"discoveryAddress":"{{cookiecutter.ISTIOD_NAME}}.{{cookiecutter.ISTIO_CONTROL_PLANE}}.svc:15012","tracing":{"zipkin":{"address":"jaeger-collector.{{cookiecutter.ISTIO_CONTROL_PLANE}}.svc:9411"},"tlsSettings":{"subjectAltNames":[]}},"proxyMetadata":{"DNS_AGENT":""}}

              '
          - name: ISTIO_META_ROUTER_MODE
            value: sni-dnat
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          ports:
          - name: http-envoy-prom
            containerPort: 15090
            protocol: TCP
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: istio-envoy
            mountPath: /etc/istio/proxy
          - name: istiod-ca-cert
            mountPath: /var/run/secrets/istio
          - name: podinfo
            mountPath: /etc/istio/pod
          - name: egressgateway-certs
            readOnly: true
            mountPath: /etc/istio/egressgateway-certs
          - name: egressgateway-ca-certs
            readOnly: true
            mountPath: /etc/istio/egressgateway-ca-certs
          terminationMessagePolicy: File
          image: {{cookiecutter.PROXY_IMAGE}}
          args:
          - proxy
          - router
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --serviceCluster
          - egressgateway-{{cookiecutter.PROJECT_NAME}}.$(POD_NAMESPACE)
          - --trust-domain=cluster.local
        serviceAccount: default
        volumes:
        - name: istio-envoy
          emptyDir: {}
        - name: istiod-ca-cert
          configMap:
            name: istio-ca-root-cert
            defaultMode: 420
        - name: egressgateway-certs
          secret:
            secretName: istio-egressgateway-certs
            defaultMode: 420
            optional: true
        - name: egressgateway-ca-certs
          secret:
            secretName: istio-egressgateway-ca-certs
            defaultMode: 420
            optional: true
        - name: podinfo
          downwardAPI:
            items:
            - path: labels
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels
            - path: annotations
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations
            defaultMode: 256
        dnsPolicy: ClusterFirst
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      template: {{cookiecutter.APP_NAME}}
    name: egressgateway-svc
  spec:
    ports:
    - name: http-{{cookiecutter.EGRESS_PORT}}
      port: {{cookiecutter.EGRESS_PORT}}
    selector:
      app: egressgateway-{{cookiecutter.PROJECT_NAME}}
      istio: egressgateway-{{cookiecutter.PROJECT_NAME}}
